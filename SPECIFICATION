
          COSMOLOGICAL PARAMETER CONTAINER CLASS SPECIFICATION
        
                          v0.1 (2018-06-17)

This document specifies a basic container class for cosmological parameters. 
It may be implemented in any programming language. The important features of 
the specification are that (a) a base set of cosmological parameters is 
defined, with standardized names and meanings; (b) there are conditions to 
guarantee the consistency of the parameter values; and (c) the ways in which 
the class can be extended are specified, to ensure interoperability between 
different codes.


1. BASE SET OF PARAMETERS

The following parameters MUST exist as top-level members of the class. All of 
the parameters MUST be stored as floating point numbers (single or double 
precision). The names of these parameters MUST match the names defined here, 
including capitalization and underscores.

  (1)  Omega_c - Fractional density of CDM relative to critical density
  (2)  Omega_b - Fractional density of baryons relative to critical density
  (3)  Omega_m - Fractional density of all matter relative to critical density
  (4)  Omega_k - Fractional density of curvature relative to critical density
  (5)  Omega_l - Fractional density of Lambda/DE relative to critical density
  (6)  Omega_n_mass - Omega_nu for massive neutrinos
  (7)  Omega_n_rel - Omega_nu for massless neutrinos
  (8)  Omega_g - Fractional density of photons relative to critical density
  (9)  w0 - Dark energy equation of state (value at a=1)
  (10) wa - Dark energy equation of state (controls asymptotic value as a -> 0)
  (11) h - Dimensionless Hubble parameter
  (12) N_nu_mass - Number of different species of massive neutrinos
  (13) N_nu_rel - Effective number of massless neutrinos
  (14) mnu - Sum of neutrino masses, in eV
  (15) A_s - Primordial scalar power spectrum amplitude (dimensionless)
  (16) n_s - Spectral index of primordial scalar power spectrum
  (17) sigma_8 - Power spectrum amplitude, sigma_8

Notes:
 - Parameters (1)-(8) are defined with respect to the critical density at a=1.
 - The values of all parameters must be positive semi-definite (>=0), except 
   for parameters (4), (9), and (10).
 - Parameters (9) and (10) are defined under the assumption that the dark 
   energy equation of state is modeled as w(a) = w_0 + w_a (1 - a).
 - The normalization of the matter power spectrum may be specified using EITHER 
   parameter (15) or (17). The other parameter MUST then be set to a special 
   value (e.g. NaN or None) UNLESS it is treated as a derived parameter (i.e. 
   set to its correct value given the values of the cosmological parameters 
   that were specified). For example, if A_s was specified by the user, 
   sigma_8 must be set to NaN unless its value is subsequently calculated by 
   performing the appropriate integral over the linear matter power spectrum.
 - (FIXME): Parameters (6), (12), and (14) MUST be consistent. It is assumed 
   that any massive neutrinos all have identical masses.


2. DEFAULT VALUES AND CONSISTENCY CONDITIONS

Parameters (1), (2), (5), (11), and (16) are 'compulsory parameters' and MUST 
be given (or derived from) user-defined input values. They have no default 
values. One of either (15) or (17) MUST also be given a user-defined input 
value (the other can be set to NaN/None, or can be derived; see note above).

Parameter (3) MUST satisfy the condition:
    Omega_m = Omega_c + Omega_b + Omega_n_mass

Parameter (4) MUST satisfy the condition:
    1 - Omega_k = Omega_m + Omega_l + Omega_g + Omega_n_rel

Parameters (6), (7), (8), (10), (12), and (14) have default values of 0.0.

Parameter (9) has a default value of -1.0.

Parameter (13) has a default value of 3.046.

FIXME: Should define default Omega_g, i.e. don't set to zero.


3. INTERCHANGE FORMAT

This section specifies a common file format for interchanging cosmological 
parameters between different codes. This is provided to ensure that there is a 
well-defined standard for how parameters should be input and output by any 
code. Other methods of interchanging parameters (e.g. by passing objects or 
other types of file) can be used, but this format SHOULD be supported by all 
implementations of the standard.

You may implement this specification in your code however you see fit. However, 
you SHOULD provide the following functions (prefixes may be added but the base 
names of the functions SHOULD be preserved):

  read_cosmo_desc
  write_cosmo_desc
  validate_cosmo_desc

These functions read and write parameters and their values from text files with 
a standardized format, defined as follows.

  (1)  The file MUST be in ASCII format, with no unicode characters allowed.
  (2)  Lines beginning with '#' are comments and MUST be ignored. No other 
       comment characters are allowed.
  (3)  Each line denotes a single cosmological parameter and its value. Values 
       MUST NOT be split over multiple lines.
  (4)  The format of each line is 'cosmo_parameter_name:value\n', where 
       'cosmo_parameter_name' is the standardized name of the parameter, as 
       defined above, and 'value' is the floating point value of the parameter. 
       The names of these parameters MUST match the names defined in Section 1, 
       including capitalization and underscores. Parameters that have names 
       with different capitalization/underscores MUST be treated as separate 
       parameters.
  (5)  The floating point value may be provided in any standard string format, 
       e.g. floating point representation ('3.141') or scientific notation 
       ('3.141e+00'). There are no requirements on the number of significant 
       figures.
  (6)  The line must end with the standard newline character, "\n".
  (7)  White space MAY be included before and after the parameter name and/or 
       value, for the sake of human readability. It MUST be ignored (trimmed) 
       when reading the file. Only the standard space character may be used for 
       white space. Tab characters ('\t') are NOT allowed.
  (8)  The ordering of the parameters is not specified. It is recommended that 
       the base parameters are listed first though, followed by extension 
       parameters.
  (9)  All of the base parameters SHOULD be included in the output. If they are 
       not included in the file, they MUST be assumed to take their default 
       values, as specified above. (The 'compulsory parameters' do not have 
       default values, so if any compulsory parameter is not included in the 
       file, it is invalid and an error MUST be raised.)
  (10) Some extension parameters may require multiple values to be specified. 
       In this case, the parameter values SHOULD be provided using a comma-
       separated list on a single line. Whitespace should be treated as in 
       point (7).
  (11) Derived parameters (those that can be calculated from other input 
       parameters) MAY be included in the file. An implementation MAY ignore 
       these values and calculate the derived parameters itself, however. In 
       this case, the code SHOULD compare its own calculation of the derived 
       parameter with the value in the file and SHOULD include the comparison 
       in debugging output (e.g. log files or warnings).

FIXME: Should we specify how hashes can be created? This would require a 
standard ordering and a standard floating point precision.

FIXME: Should we specify how non-floating point parameters can be used?

The 'validate_cosmo_desc' function SHOULD be provided to ensure that the 
parameters and their values are valid and conform to this standard. If a 
'validate_cosmo_desc' function is provided, it MUST test all of the conditions 
in Section 2 of this specification. It MUST NOT test the conditions in this 
section (Section 3), as they only concern the validity of the file format and 
not the parameters themselves.

Instead, the conditions in this section SHOULD be tested by 'read_cosmo_desc'. 
If these conditions are not satisfied by a given file, the 'read_cosmo_desc' 
function MUST raise an error. This behavior is intended to prevent ambiguous 
conditions arising.


4. CREATING HASHES OF PARAMETER VALUES

Hashes are commonly used to test whether parameter values have changed. Hashes 
for sets of parameters MAY be included alongside the cosmological parameters as 
metadata. If hashes are included in the cosmological parameter container class, 
they MUST have names that are prefixed with "hash". Hashes SHOULD be md5sum 
digests in hexadecimal format.

If hashes are included in interchange files (described in Section 3), they 
should follow the same format as any other parameter, with the exception that 
the "value" field will be a string representation of a hexadecimal number 
instead of a floating point number.

For consistency between different codes, hashes SHOULD be created from a set of 
parameters according to the following rules:

  (1)  Strings for each parameter MUST be concatenated together into a single 
       string that is then hashed. The parameter strings MUST be in the format 
       described in Section 3 (with the following additional conditions).
  (2)  Before concatenation, the parameter strings MUST be ordered 
       alphabetically, by parameter name.
  (3)  All whitespace and newline characters MUST be removed from the string. 
       Colons and commas MUST be retained.
  (4)  Floating point numbers MUST be in the format "%10.10e". They MUST NOT be 
       in an arbitrary format, as was allowed in Section 3.
  (5)  Parameters that are not defined (i.e. are set to NaN or None) MUST be 
       replaced by zero, using the format string from item (4).

For convenience, the following groupings of base parameters and standardized 
hash names are defined:

  hash_expansion:   Parameters that affect the expansion rate, H(z).
                    Base parameters: (3, 4, 5, 7, 8, 9, 10, 11)
                    
  hash_growth:      Parameters that affect the linear growth rate, f(z).
                    Base parameters: (3, 4, 5, 7, 8, 9, 10, 11)
  
  hash_powspec:     Parameters that affect the matter power spectrum, P(k).
                    Base parameters: (1, 2, 4, 5, 6, 9, 10, 11, 12, 14, 15, 
                                      16, 17)
                    
  hash_lensing:     Parameters that affect galaxy shear or convergence.
                    Base parameters: (TODO)
                    
  hash_cmb:         Parameters that affect the unlensed CMB angular power 
                    spectrum (T, E, B).
                    Base parameters: (1, 2, 4, 5, 6, 7, 8, 9, 10, 11) (FIXME)

  hash_cmblens:     Parameters that affect the CMB lensing potential.
                    Base parameters: (TODO)

If the base class is extended with new parameters (see Section 5), and those 
parameters affect one of the standard hashes defined above, they MUST be 
included in the calculation of that hash, even though they are not base 
parameters.


5. EXTENSIONS OF THE CLASS
(incomplete)

New parameters should occupy a distinct namespace from the base parameters. The 
namespace may be denoted using whatever convention is typical for the 
programming language being used. When the parameters are output into the common 
interchange format described in Section 3, however, the namespace MUST be 
denoted by adding a new block, i.e. parameters within the namespace must be 
placed within a named block denoted by "[namespace]", where namespace is the 
name of the namespace. This follows the convention for adding new blocks used 
by the YAML standard.

FIXME: Failing gracefully: when can extension parameters be ignored, and when 
should a program stop and say "I can't deal with these"?

Extensions may replace some of the base parameters, or make them obsolete. For 
example, an extension might describe a model where w_a is no longer a 
meaningful parameter. In this case <TODO>.

